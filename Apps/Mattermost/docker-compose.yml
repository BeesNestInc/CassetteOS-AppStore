# https://docs.docker.com/compose/environment-variables/
services:
  mattermost:
    cpu_shares: 90
    command: []
    container_name: mattermost
    deploy:
      resources:
        limits:
          memory: "4096M"
    hostname: mattermost
    image: mattermost/mattermost-team-edition:10.5.2
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    pids_limit: 200
    ports:
      - 8065:8065
      - 8443:8443/udp
      - 8443:8443/tcp
    read_only: false
    tmpfs:
      - /tmp
    volumes:
      - /DATA/AppData/$AppID/config:/mattermost/config:rw
      - /DATA/AppData/$AppID/data:/mattermost/data:rw
      - /DATA/AppData/$AppID/logs:/mattermost/logs:rw
      - /DATA/AppData/$AppID/plugins:/mattermost/plugins:rw
      - /DATA/AppData/$AppID/client/plugins:/mattermost/client/plugins:rw
      - /DATA/AppData/$AppID/bleve-indexes:/mattermost/bleve-indexes:rw
      # When you want to use SSO with GitLab, you have to add the cert pki chain of GitLab inside Alpine
      # to avoid Token request failed: certificate signed by unknown authority 
      # (link: https://github.com/mattermost/mattermost-server/issues/13059 and https://github.com/mattermost/docker/issues/34)
      # - ${GITLAB_PKI_CHAIN_PATH}:/etc/ssl/certs/pki_chain.pem:ro
    networks:
      - cassetteos
    extra_hosts:
      - host.docker.internal:172.30.0.1
    environment:
      # timezone inside container
      TZ: UTC
      PGUSER:
      PGPASSWORD:
      PGDATABASE:
      # necessary Mattermost options/variables (see env.example)
      MM_SQLSETTINGS_DRIVERNAME: postgres
      MM_SQLSETTINGS_DATASOURCE: postgres://$${PGUSER}:$${PGPASSWORD}@host.docker.internal:5432/$${PGDATABASE}?sslmode=disable&connect_timeout=10
      # necessary for bleve
      MM_BLEVESETTINGS_INDEXDIR: /mattermost/bleve-indexes
      # additional settings
      MM_SERVICESETTINGS_SITEURL: https://mm.example.com
      MM_SERVICESETTINGS_ALLOWCORSFROM: http://localhost:8065
    x-casaos:
      ports:
        - container: "8065"
          description:
            en_us: ""
networks:
  cassetteos:
    external: true
x-casaos:
  architectures:
    - amd64
  main: mattermost
  author: Mattermost,Inc.
  category: コミュニケーションツール
  description:
    ja_jp: | 
      ## Mattermost
      ![ロゴ](https://user-images.githubusercontent.com/7205829/137170381-fe86eef0-bccc-4fdd-8e92-b258884ebdd7.png)
  index: /
  tagline:
    ja_jp: Mattermostはオープンソースのセルフホスト型コラボレーションプラットフォームです。
    en_us: mattermost
  thumbnail: 
  port_map: "8065"
  scheme: http
  title:
    en_us: Mattermost 
    ja_jp: Mattermost
  icon: https://github.com/mattermost/mattermost/blob/master/webapp/channels/src/images/favicon/android-chrome-192x192.png?raw=true
  screenshot_link:
    - https://user-images.githubusercontent.com/7205829/136107976-7a894c9e-290a-490d-8501-e5fdbfc3785a.png
x-cassetteos:
  db-credentials:
    user_var: "PGUSER"
    password_var: "PGPASSWORD"
    db_name_var: "PGDATABASE"
# If you use rolling image tags and feel lucky watchtower can automatically pull new images and
# instantiate containers from it. https://containrrr.dev/watchtower/
# Please keep in mind watchtower will have access on the docker socket. This can be a security risk.
#
#  watchtower:
#    container_name: watchtower
#    image: containrrr/watchtower:latest
#    restart: unless-stopped
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock